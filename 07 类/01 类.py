# 01 类

# https://docs.python.org/3/tutorial/classes.html
# 类提供了一种将数据和功能捆绑在一起的方式。创建一个新类会创建一种新的对象类型，从而允许创建该类型的新实例。
# 每个类实例都可以拥有用于维护其状态的属性。类实例还可以有方法（由其类定义）来修改其状态。
# 与其他编程语言相比，Python 的类机制以最少的新语法和语义添加了类的功能。
# 它是 C++ 和 Modula-3 中类机制的混合体。
# Python 类提供了面向对象编程的所有标准特性：
#     类的继承机制允许多个基类，
#     派生类可以重写其基类或基类们的任何方法，
#     并且一个方法可以调用基类中具有相同名称的方法。
# 对象可以包含任意数量和类型的数据。
# 和模块一样，类也具有 Python 的动态特性：它们在运行时创建，并且在创建之后还可以进一步修改。
# 用 C++ 的术语来说，类成员（包括数据成员）通常是 public 的（私有变量见下文），并且所有成员函数都是虚函数。
# 像 Modula-3 一样，没有用于在方法中引用对象成员的简写方式：方法函数必须显式声明第一个参数来表示对象，
# 而这个对象在调用时会被隐式传入。
# 像 Smalltalk 一样，类本身也是对象。这为导入和重命名提供了语义。与 C++ 和 Modula-3 不同，内置类型也可以作为基类供用户扩展。
# 此外，像 C++ 一样，大多数带有特殊语法的内置运算符（算术运算符、下标等）都可以为类实例重新定义。

# 类是创建新对象的蓝图
# 对象是类的实例

# 举个例子
# 类：Human —— 我们可以有一个叫 humans 的类，这个类会定义人类的所有属性
# 对象：John、Miguel、Mosh